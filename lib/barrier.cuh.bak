#ifndef _BARRIER_H_
#define _BARRIER_H_

#include "util.h"

__device__ __forceinline__ int ThreadLoad(int *ptr)
{
	int retval;           
	asm volatile ("ld.global.cg.s32 %0, [%1];" :    \
			"=r"(retval) :                        \
			"l" (ptr) );                          \
		return retval;  
}

//__device__ __forceinline__ void ThreadStore(volatile int *ptr, int val)
//{
//	asm volatile ("st.global.s32 [%0], %1;" : "+l"(ptr): "r"(val));
//}

class Barrier {
	
	public:
		int *d_lock;
		int init_val;
		int update_val;

		Barrier(int blks_num){
			setup(blks_num);	
		}

		~Barrier(){
			printf("Barrier is deleted\n");
		}
	public:

		void setup(int blks_num)
		{
			init_val = 0;
			update_val = 1;
			H_ERR(cudaMalloc((void **)&d_lock, sizeof(int)*blks_num));
			H_ERR(cudaMemset((void *)d_lock, init_val, sizeof(int)*blks_num));
			H_ERR(cudaThreadSynchronize());
		}


		//__device__ __forceinline__ void sync_grid(int init_val, int update_val)
		__device__ __forceinline__ void sync_grid_opt() const
		{
			volatile int *vol_lock = d_lock;	

			// Threadfence and syncthreads to make sure global writes are visible before
			// thread-0 reports in with its sync counter
			__threadfence();
			__syncthreads();

			if (blockIdx.x == 0)
			{
				// Report in ourselves
				if (threadIdx.x == 0)
					//vol_lock[blockIdx.x] = 1;
					atomicCAS(d_lock + blockIdx.x, 0, 1);

				__syncthreads();

				// Wait for everyone else to report in
				for (int peer_block = threadIdx.x; 
						peer_block < gridDim.x; peer_block += blockDim.x)
					//while (ThreadLoad(d_lock + peer_block) != 1)
					while (atomicCAS(d_lock + peer_block, 1, 1) != 1)
						__threadfence_block();
				
				__syncthreads();

				// Let everyone know it's safe to proceed
				for (int peer_block = threadIdx.x; 
						peer_block < gridDim.x; peer_block += blockDim.x)
					//vol_lock[peer_block] = 0;
					atomicCAS(d_lock + peer_block, 1, 0);
			}
			else
			{
				if (threadIdx.x == 0)
				{
					// Report in
					//vol_lock[blockIdx.x] = 1;
					atomicCAS(d_lock + blockIdx.x, 0, 1);

					// Wait for acknowledgment
					//while (ThreadLoad(d_lock + blockIdx.x) != 0)
					while (atomicCAS(d_lock + blockIdx.x, 0, 0)!=0)
						__threadfence_block();
				}
				__syncthreads();
			}
		}
};

#endif
